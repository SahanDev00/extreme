import React, { useEffect, useState } from 'react';
import emailjs from 'emailjs-com';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const handleReset = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      // Step 1: Verify if the email is registered
      const apiKey = process.env.REACT_APP_API_KEY;
      const response = await fetch(`${process.env.REACT_APP_API_URL}/Customer/GetByEmail?EmailAddress=${email}`,{
        method: 'GET',
        headers: {
          'APIKey': apiKey,
        },
      });
      const data = await response.json();

      if (data.success) {
        // Step 2: Generate a token if the email is found (the token is generated by the backend)
        const tokenResponse = await fetch(`${process.env.REACT_APP_API_URL}/Token`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'APIKey': apiKey,
          },
          body: JSON.stringify({
            tokenID: "", 
            tokenType: "CPwReset", 
            refID: data.data.customerID, 
            tokenData: "", // Not needed because the backend generates it
            createdDate: new Date().toISOString(), 
            expiryDate: new Date(new Date().getTime() + 48 * 60 * 60 * 1000).toISOString(), 
            tokenStatus: "A"
          })
        });

        const tokenData = await tokenResponse.json();

        if (tokenData.data.tokenID) {
          // Step 3: Send the email using EmailJS with the token ID provided by the backend
          const domain = window.location.origin;
          const emailParams = {
            to_name: data.data.firstName + " " + data.data.lastName,
            to_email: data.data.loginEmail,
            reset_link: `${domain}/reset-password/${tokenData.data.tokenID}`, // Use the token ID from backend
            from_name: "Extreme",
          };

          sendEmail(emailParams);
          toast.success('An email with a reset link has been sent.', {
            position: "top-right",
            autoClose: 2000,
          });
        } else {
          setMessage('Failed to generate reset token.');
        }
      } else {
        setMessage('Email not found. Please enter a registered email.');
      }
    } catch (error) {
      setMessage('Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Function to send email using EmailJS
  const sendEmail = (emailParams) => {
    emailjs
      .send(
        'service_0kjjaxk',     // EmailJS service ID
        'template_vs5ea9o',    // EmailJS template ID
        emailParams,
        'mhNBu9YMm0GPVunYP'         // EmailJS user ID
      )
      .then(
        (result) => {
          console.log('Email successfully sent!', result.text);
        },
        (error) => {
          console.log('Email failed to send...', error.text);
        }
      );
  };

  return (
    <div className='h-screen flex justify-center items-center'>
      <div className='h-[500px] w-[700px]'>
        <div className='w-full h-full p-5 justify-center items-center flex flex-col'>
          <h1 className='text-3xl text-center font-bold font-overpass text-gray-600'>
            We will send you an email to reset your password.
          </h1>
          <form className='mt-5 w-full' onSubmit={handleReset}>
            <input
              type="email"
              placeholder='example@gmail.com'
              className='w-full border pl-3 py-4'
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <button
              type='submit'
              className={`w-full py-2 rounded bg-cyan-500 hover:bg-cyan-600 duration-100 text-white text-2xl font-overpass mt-3 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
              disabled={loading}
            >
              {loading ? 'Processing...' : 'Reset'}
            </button>
          </form>
          {message && <p className='mt-4 text-center text-red-500'>{message}</p>}
        </div>
      </div>
      {/* <ToastContainer /> */}
    </div>
  );
};

export default ForgotPassword;
